generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  STUDENT
  COLLEGE_STAFF
  RAILWAY_STAFF
}

enum RequestStatus {
  PENDING
  COLLEGE_APPROVED
  COLLEGE_REJECTED
  RAILWAY_APPROVED
  RAILWAY_REJECTED
  COMPLETED
}

model User {
  id          String    @id @default(cuid())
  name        String
  email       String    @unique
  password    String
  collegeName String
  role        UserRole  @default(STUDENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  accounts    Account[]
  sessions    Session[]

  // Relations for different roles
  studentRequests  ConcessionRequest[] @relation("studentRequests")
  collegeApprovals ConcessionRequest[] @relation("collegeApprovals")
  railwayApprovals ConcessionRequest[] @relation("railwayApprovals")
}

model ConcessionRequest {
  id                 String        @id @default(cuid())
  userId             String // Foreign key for student
  from               String
  to                 String
  period             Int
  class              String
  studentId          String
  dateOfBirth        DateTime
  residentialAddress String
  aadharNumber       String
  collegeIdNumber    String
  status             RequestStatus @default(PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  student User @relation("studentRequests", fields: [userId], references: [id])

  // Add college staff relation
  collegeStaffId String?
  collegeStaff   User?   @relation("collegeApprovals", fields: [collegeStaffId], references: [id])

  // Add railway staff relation
  railwayStaffId String?
  railwayStaff   User?   @relation("railwayApprovals", fields: [railwayStaffId], references: [id])

  @@index([userId])
  @@index([collegeStaffId])
  @@index([railwayStaffId])
}
